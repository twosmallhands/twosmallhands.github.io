{"meta":{"title":"大哥，里边请！","subtitle":null,"description":null,"author":"two small hands","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"c++中的string操作解析","slug":"c-中的string操作解析","date":"2019-05-05T12:41:51.000Z","updated":"2019-05-06T03:26:52.387Z","comments":true,"path":"2019/05/05/c-中的string操作解析/","link":"","permalink":"http://yoursite.com/2019/05/05/c-中的string操作解析/","excerpt":"","text":"#string的初始化123456string s1string s2(s1)string s2 = s1string s3(&quot;value&quot;)string s2 = &quot;value&quot;string s4(n,&apos;c&apos;)//把s4初始化成为由连续n个字符c组成的串 #string的基本操作12str.empty()//str为空返回truestr.size()//返回str中字符的个数 类型为string::size_type(无符号整形数) #string的修改 ##string中的+重载每个加法运算符(+)的两侧的运算对象至少有一个是stringc++中的字符串字面值如”asdasd”并不是标准库类型string的对象，”asdasd”与string是不同类型 1234str=str1+str2//字符串与字符串拼接str=str1+&quot;asdfg&quot;str=str1+&apos;a&apos;//字符串与字符拼接str=str1+&quot;a&quot;//字符用单引号双引号等效 ##string的插入append()函数用来在字符串的末尾追加,返回string&amp;1234str.append(str1)str.append(str1,6,3)//追加str1[6]开始的3个字符,str[6]str[7]str[8]str.append(&quot;asdasd&quot;)str.append(12,&apos;a&apos;)//追加12个&apos;a&apos; ##string的赋值assign()函数为先将原字符串清空，然后赋予新的值作替换,返回string&amp;12345str.assign(str1)str.assign(str1,6,3)//使用str1[6]开始的3个字符,str[6]str[7]str[8]，来为str赋值str.assign(&quot;asdasd&quot;)str.assign(10,&apos;a&apos;)str.assign(str1.begin()+1,base.end()-1) ##string的替换replace()函数替换目标位置字符串，可以用insert()和erase()函数替代，但replace()函数简单12345str.replace(6,3,str2)//删除从str[6]开始的3个字符,str[6]str[7]str[8],替换成为str2(注意:str2长度不一定为3)str.replace(6,3,str2,2,4)//删除从str[6]开始的3个字符,str[6]str[7]str[8],替换成为从str2[2]开始的4个字符str.replace(6,3,&quot;asdasd&quot;)str.replace(6,3,&quot;asdasd&quot;,3)//替换成为&quot;asdasd&quot;的前三个字符str.replace(str.begin()+1,str.end(),&quot;asdasd&quot;)//删除从str[1]开始，到str末尾的所有字符，替换成为&quot;asdasd&quot; ##string的插入insert()函数用于在指定位置插入字符串1234567str.insert(6,str2)//在str[6]的位置插入str2str.insert(6,str2,3,4)//在str[6]的位置插入str2[3]开始的4个字符str.insert(10,&quot;asdasd&quot;)str.insert(10,&quot;asdasd&quot;,2)//在str[10]插入&quot;asdasd&quot;的前两个字符str.insert(2,5,&apos;a&apos;)//在str[2]插入5个&apos;a&apos;it = str.insert(str.begin()+5,&apos;,&apos;)//s.insert(s.it,ch)在*s的it指向位置前面*插入一个字符ch，返回新插入的位置的迭代器it = str.insert (str.end(),3,&apos;.&apos;)//在*s的it所指向位置的前面*插入n个ch，无法插入字符串 ##string","categories":[],"tags":[]},{"title":"windows下和linux下回车换行符的区别","slug":"windows下和linux下回车换行符的区别","date":"2019-04-26T12:00:02.000Z","updated":"2019-04-26T12:06:33.765Z","comments":true,"path":"2019/04/26/windows下和linux下回车换行符的区别/","link":"","permalink":"http://yoursite.com/2019/04/26/windows下和linux下回车换行符的区别/","excerpt":"","text":"在Linux下和Windows下新建一个文本文件，注意只是新建，并不向文件中写入数据，此时两个文件是一样的。此时的文件(不管是何处新建的)放在Windows下和Linux下都是一样的。 但是一旦修改则不一样。在Linux下修改并保存，则换行是 \\n ，在Windows下修改并保存，则换行是 \\r \\n 。 并且，一旦修改并保存，则该文件的换行是 \\n 还是 \\r \\n 都是不会变了，除非人为的修改，只是修改保存其中的内容，换行的内容是不会变的。 用二进制方式时是\\r\\n，用文本方式时是\\n也就是说windows下打开文件流，判断是否是换行符时，只用判断是否是\\n，而不是判断\\r\\n","categories":[],"tags":[]},{"title":"git学习笔记","slug":"git学习笔记","date":"2019-03-11T09:37:18.000Z","updated":"2019-03-11T11:18:59.346Z","comments":true,"path":"2019/03/11/git学习笔记/","link":"","permalink":"http://yoursite.com/2019/03/11/git学习笔记/","excerpt":"","text":"初始化本地库进入项目文件夹使用git init命令初始化本地库，会在该文件夹生成隐藏子文件夹.git,该文件夹不要删除也不要随意修改。 设置签名项目级别/仓库级别：仅在当前项目本地库有效使用`git config user.name xxx` 使用`git config user.email xxx@xxx.com` 系统用户级别：登录当前操作系统的用户范围使用`git config --global user.name xxx` 使用`git config --global user.email xxx@xxx.com` 级别优先度：两个都配置的话，先使用项目级别 两个都未配置无法使用 状态查看及转换操作使用git status查看工作区，暂存区状态使用git add filenamne将工作区文件添加到暂存区使用git commit filename将暂存区文件提交到本地库使用git commit -m &quot;xxx&quot; filename添加注释信息 版本查看使用git log使用git log --oneline使用git reflog 版本前进后退实质，更改HEAD指针指向 基于索引值前进后退使用命令git reset --hard 索引值完成版本转换 使用^符号只能后退使用命令git reset --hard HEAD^往后退一步使用命令git reset --hard HEAD^^往后退两步 reset的三种参数：hard,soft,mixedsoft参数：仅仅在本地库移动HEAD指针mixed参数：在本地库移动HEAD指针，重置暂存区hard参数：在本地库移动HEAD指针，重置暂存区，重置工作区 分支操作创建及切换分支初次创建一般为master分支，使用git status命令可以查看当前分支使用git branch -v可以查看所有分支使用git branch 分支名可以创建新分支使用git checkout 分支名可以切换分支 分支合并第一步：切换到接受修改的分支(所要被增加新内容)上，使用git checkout 被合并的分支名命令第二部：执行merge命令，使用git merge 有新内容的分支名命令，此处分支名为 远程库(代码托管中心)创建远程库GitHub，码云……在GitHub上创建新仓库后，会给出http地址和ssh地址 在本地创建远程库地址别名使用git remote -v查看当前已存远程库别名使用git remote add 别名 http地址给远程库地址创建别名 将分支推送到远程库使用git push 远程库别名 分支名将所选分支推送到远程库 将分支克隆到本地使用git clone 远程库地址将远程库分支克隆到本地该操作有三个作用： 完整的把远程库下载到本地 创建远程地址别名 初始化本地库 远程库修改的拉取使用git fetch 远程库别名 分支名将远程库拉取到本地使用git merge 远程库别名/分支名将远程库与本地库合并分开操作便于抓取后先审核文件，再选择是否合并 使用git pull 远程库别名 分支名同时完成上述两步操作这种操作适于确定文件无误，直接合并","categories":[],"tags":[]},{"title":"Hexo 常用命令","slug":"Hexo-常用命令","date":"2019-03-11T05:08:32.000Z","updated":"2019-03-11T09:30:27.940Z","comments":true,"path":"2019/03/11/Hexo-常用命令/","link":"","permalink":"http://yoursite.com/2019/03/11/Hexo-常用命令/","excerpt":"","text":"建站使用hexo init 文件夹名在当前目录中创建该文件夹，生成文件夹目录如下 .├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 写博客使用hexo new &#39;文章名&#39;创建md文件 生成静态文件使用hexo generate生成静态文件可以简写成hexo g，先生成静态文件才能部署 部署网站使用hexo deploy部署到服务器上，可以简写成hexo d 启动服务器使用hexo server启动本地服务器，可以简写成hexo s默认情况下访问地址为http://localhost:4000 清除缓存文件和已经生成的静态文件使用hexo clean清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。","categories":[],"tags":[]},{"title":"Markdown学习笔记","slug":"Markdown学习笔记","date":"2019-03-10T03:47:35.475Z","updated":"2019-03-10T05:03:40.042Z","comments":true,"path":"2019/03/10/Markdown学习笔记/","link":"","permalink":"http://yoursite.com/2019/03/10/Markdown学习笔记/","excerpt":"","text":"标题使用#表示一级标题，##表示二级标题，以此类推 一级标题二级标题三级标题四级标题 列表无序列表使用-+空格+文本 数据结构与算法 数据库原理 计算机网络 操作系统 有序列表使用1.+空格+文本 数据结构与算法 数据库原理 计算机网络 操作系统 超链接使用[]+()方式[]中存放链接注释，()中存放超链接地址赵桀浩的个人博客:twosmallhands.github.io 插入图片使用!+[]+()的方法[]中存放替代文字，()中存放图片的本地地址或网络地址 引用使用&gt;+空格+文本 山重水复疑无路柳暗花明又一村 表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行：为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 | 来标记单元格边界：|和文本之间要有空格在表头下方的分隔线标记中加入 :，即可标记下方单元格内容的对齐方式：:— 代表左对齐:–: 代表居中对齐—: 代表右对齐 姓名 语文成绩 数学成绩 张三 100 100 李四 99 99 数学公式行内公式： 两边要加反单引号(注意不是’是数字键盘1左边的那个符号)$y=x^2$独行公式：$$y=x^2$$ 代码引用单行代码：使用反单引号框起来int a=10； 多行代码：行首行末使用三个反单引号1234if(a==b) a++;else a--;","categories":[],"tags":[]},{"title":"我的第一篇博文","slug":"我的第一篇博文","date":"2019-03-09T13:43:15.000Z","updated":"2019-03-09T13:47:10.325Z","comments":true,"path":"2019/03/09/我的第一篇博文/","link":"","permalink":"http://yoursite.com/2019/03/09/我的第一篇博文/","excerpt":"","text":"第一章内容 第二章内容 参考文献www.bilibili.com","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-09T13:31:56.485Z","updated":"2019-03-09T13:31:56.485Z","comments":true,"path":"2019/03/09/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}